from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import os
from dotenv import load_dotenv

load_dotenv()  # Load .env file

# тЬЕ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ЁЯзатЬи рж╕рзНржмрж╛ржЧрждржо тАШDoSuit AiтАЩ ржмржЯрзЗ!\n\n"
        "ЁЯФ╣ ржЖржорж┐ ржЖржкржирж╛рж░ ржбрж┐ржЬрж┐ржЯрж╛рж▓ рж╕рж╣ржХрж╛рж░рзА тАШWazifa AiтАЩ ЁЯзХ\n"
        "ЁЯФ╣ рждрзИрж░рж┐ ржХрж░рзЗржЫрзЗ ЁЯЗзЁЯЗй ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рж┐ ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо тАШDoZoneтАЩ ЁЯЗзЁЯЗй\n\n"
        "ЁЯТ╝ ржЖржорж┐ ржкрзНрж░рж╕рзНрждрзБржд ржЖржкржирж╛ржХрзЗ ржмрж┐ржнрж┐ржирзНржи ржкрзНрж░ржлрзЗрж╢ржирж╛рж▓ рж╕рж╛рж░рзНржнрж┐рж╕ ржжрж┐рждрзЗ тАФ\n"
        "ЁЯОм ржнрж┐ржбрж┐ржУ ржПржбрж┐ржЯ, ЁЯЦ╝я╕П ржлржЯрзЛ ржПржбрж┐ржЯ, ЁЯза AI рж╕рж╣рж╛рзЯрждрж╛, тШкя╕П ржЗрж╕рж▓рж╛ржорж┐ржХ ржЖрж▓рзЛржЪржирж╛рж░ ржорждрзЛ ржЖрж░ржУ ржЕржирзЗржХ ржХрж┐ржЫрзБ!\n\n"
        "ЁЯСЗ ржирж┐ржЪрзЗ ржерж╛ржХрж╛ 'ЁЯУж ржорзЗржирзБ' рждрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ рж╕рж╛рж░рзНржнрж┐рж╕ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи\n"
        "ржзржирзНржпржмрж╛ржж ржЖржкржирж╛ржХрзЗ тЭдя╕П"
    )

# тЬЕ /menu
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_page(update, context, 1)

# тЬЕ ржорзЗржирзБ ржкрзЗржЬрж┐ржВ
async def send_page(update, context, page):
    if update.callback_query:
        chat_id = update.callback_query.message.chat.id
        await update.callback_query.answer()
    else:
        chat_id = update.message.chat.id

    if page == 1:
        keyboard = [
            [InlineKeyboardButton("ЁЯОм ржнрж┐ржбрж┐ржУ ржПржбрж┐ржЯ", callback_data="video_edit")],
            [InlineKeyboardButton("ЁЯЦ╝я╕П ржлржЯрзЛ ржПржбрж┐ржЯ", callback_data="photo_edit")],
            [InlineKeyboardButton("ЁЯУ╝ CapCut/Remini Pro", callback_data="capcut")],
            [InlineKeyboardButton("ЁЯЫая╕П ржУрзЯрзЗржм/рж╕ржлржЯржУрзЯрзНржпрж╛рж░ ржЕрж░рзНржбрж╛рж░", callback_data="web_order")],
            [InlineKeyboardButton("ЁЯУ▒ ржлрзЗрж╕ржмрзБржХ/ржЯрж┐ржХржЯржХ рж▓рж╛ржЗржХ/ржлрж▓рзЛрзЯрж╛рж░", callback_data="smm_social")],
            [InlineKeyboardButton("тЮбя╕П ржкрж░рзЗрж░ ржкрзЗржЬ", callback_data="page_2")]
        ]
    elif page == 2:
        keyboard = [
            [InlineKeyboardButton("ЁЯдЦ ржУрзЯрж╛ржЬрж┐ржлрж╛ Ai", callback_data="wazifa_ai")],
            [InlineKeyboardButton("ЁЯПЪ ржирзБрж░ Ai", callback_data="nur_ai")],
            [InlineKeyboardButton("ЁЯУЮ ржХрж╛рж╕рзНржЯржорж╛рж░ ржХрзЗрзЯрж╛рж░", callback_data="customer_care")],
            [InlineKeyboardButton("ЁЯУ▓ ржЯрзЗрж▓рж┐ржХржо рж╕рж╛рж░рзНржнрж┐рж╕", callback_data="telecom")],
            [InlineKeyboardButton("ЁЯФе ржлрзНрж░рзА ржлрж╛рзЯрж╛рж░ / ржкрж╛ржмржЬрж┐ ржЯржкржЖржк", callback_data="topup")],
            [InlineKeyboardButton("тЮбя╕П ржкрзЗржЬ рзй", callback_data="page_3"), InlineKeyboardButton("тмЕя╕П ржкрзЗржЬ рзз", callback_data="page_1")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("ЁЯФС рж╕рж╛ржЗржиржЗржЙржк / рж╕рж╛ржЗржиржЗржи", callback_data="auth")],
            [InlineKeyboardButton("ЁЯТ│ ржПржб ржмрзЗрж▓рзЗржирзНрж╕", callback_data="add_balance")],
            [InlineKeyboardButton("тмЕя╕П ржкрзЗржЫржирзЗ", callback_data="page_2")]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=chat_id, text="ЁЯУж ржирж┐ржЪрзЗ ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рж╕рж╛рж░рзНржнрж┐рж╕ ржмрзЗржЫрзЗ ржирж┐ржи:", reply_markup=reply_markup)

# тЬЕ Callback handler
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    if data.startswith("page_"):
        page_num = int(data.split("_")[1])
        await send_page(update, context, page_num)
    else:
        await update.callback_query.answer("ЁЯЪз ржлрж┐ржЪрж╛рж░ржЯрж┐ ржПржЦржирзЛ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ!")

# тЬЕ Bot Run
token = os.environ.get("BOT_TOKEN")
if not token:
    print("тЭМ ржЯрзЛржХрзЗржи ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐! ржжрзЯрж╛ ржХрж░рзЗ .env ржлрж╛ржЗрж▓рзЗ BOT_TOKEN=... рж╕ржарж┐ржХржнрж╛ржмрзЗ рж╕рзЗржЯ ржХрж░рзБржиред")
else:
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()
